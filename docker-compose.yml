# Master Docker Compose for Ash Ecosystem
# Repository: https://github.com/the-alphabet-cartel/ash
# Discord: https://discord.gg/alphabetcartel
# Website: http://alphabetcartel.org
services:
  # ========================================================================
  # Discord Bot (ash-bot)
  # ========================================================================
  ash-bot:
    #build:
      #context: ./ash-bot
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-bot:latest
    container_name: ash-bot
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.10
    ports:
      - 8882:8882
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./ash-bot/logs:/app/logs
      - ./ash-bot/data:/app/data
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8882/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "ash.service=bot"
      - "ash.version=v3.0"

  # ========================================================================
  # NLP Server (ash-nlp)
  # ========================================================================
  ash-nlp:
    build:
      context: ./ash-nlp
      dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-nlp:latest
    container_name: ash-nlp
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.11
    ports:
      - 8881:8881
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./ash-nlp/data:/app/data
      - ./ash-nlp/models/cache:/app/models/cache
      - ./ash-nlp/logs:/app/logs
      - ./ash-nlp/learning_data:/app/learning_data
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 8G  # Keep high for 3 models
          cpus: '4.0'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8881/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    labels:
      - "ash.service=nlp"
      - "ash.version=v3.0"

  # =========================================================================
  # Ash-Thrash API Server
  # =========================================================================
  ash-thrash-api:
    #build:
      #context: ./ash-thrash
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-thrash:latest
    container_name: ash-thrash-api
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.13
    ports:
      - 8884:8884
    # Override default command to start the API server
    command: ["python", "-m", "uvicorn", "src.ash_thrash_api:app", "--host", "0.0.0.0", "--port", "8884"]
    environment:
      - TZ=America/Los_Angeles
    volumes:
      # Results and logs persistence
      - ./ash-thrash/results:/app/results
      - ./ash-thrash/logs:/app/logs
      - ./ash-thrash/reports:/app/reports
      
      # Configuration (read-only)
      - ./ash-thrash/config:/app/config:ro
      
      # Secrets
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8884/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=false"
      - "ash.service=thrash-api"
      - "ash.version=v3.0"

  # =========================================================================
  # Ash-Thrash Service
  # =========================================================================
  ash-thrash:
    #build:
      #context: ./ash-thrash
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-thrash:latest
    container_name: ash-thrash
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.14
    
    # Keep the container running with a long-lived command
    # This allows you to exec into it for CLI operations
    command: ["tail", "-f", "/dev/null"]
    
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./ash-thrash/results:/app/results
      - ./ash-thrash/logs:/app/logs
      - ./ash-thrash/reports:/app/reports
      - ./ash-thrash/config:/app/config:ro
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-thrash-api:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "ash.service=thrash"
      - "ash.version=v3.0"

  # ========================================================================
  # Analytics Dashboard (ash-dash)
  # ========================================================================
#  ash-dash:
#    build:
#      context: ./ash-dash
#      dockerfile: ./Dockerfile
#    image: ghcr.io/the-alphabet-cartel/ash-dash:latest
#    container_name: ash-dash
#    restart: unless-stopped
#    networks:
#      ash-network:
#        ipv4_address: 172.20.0.12
#    ports:
#      - 8883:8883
#    environment:
#      - TZ=America/Los_Angeles
#    volumes:
#      - ./ash-dash/logs:/app/logs
#      - ./ash-dash/data:/app/data
#      - ./ash-dash/cache:/app/cache
#      - ./ash-dash/public:/app/public:ro
#      - ./ash-dash/dashboard:/app/dashboard:ro
#      - ./secrets:/run/secrets:ro
#    depends_on:
#      ash-bot:
#        condition: service_healthy
#      ash-nlp:
#        condition: service_healthy
#      ash-redis:
#        condition: service_started
#    deploy:
#      resources:
#        limits:
#          memory: 2G
#          cpus: '1.0'
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8883/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 30s

  # ========================================================================
  # Redis Cache
  # ========================================================================
  ash-redis:
    image: redis:7-alpine
    container_name: ash-redis
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.20
    ports:
      - 6379:6379
    environment:
      - TZ=America/Los_Angeles
    command: redis-server --appendonly yes --requirepass ${GLOBAL_REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./secrets:/run/secrets:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ash-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  redis_data:
    driver: local
  ash-thrash-results:
    name: ash-thrash-results
    driver: local
  ash-thrash-logs:
    name: ash-thrash-logs
    driver: local