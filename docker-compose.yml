# Master Docker Compose for Ash Ecosystem
# Repository: https://github.com/the-alphabet-cartel/ash
# Discord: https://discord.gg/alphabetcartel
# Website: http://alphabetcartel.org
services:
  # ========================================================================
  # Discord Bot (ash-bot)
  # ========================================================================
  ash-bot:
    #build:
      #context: ./ash-bot
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-bot:latest
    container_name: ash-bot
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.10
    ports:
      - 8882:8882
    environment:
      # Local Timezone
      - TZ=America/Los_Angeles
      
      # Secrets
      - BOT_DISCORD_TOKEN=${BOT_DISCORD_TOKEN}
      - GLOBAL_SESSION_TOKEN=${GLOBAL_SESSION_TOKEN}
      - GLOBAL_CLAUDE_API_KEY=${GLOBAL_CLAUDE_API_KEY}
      - GLOBAL_CLAUDE_MODEL=${GLOBAL_CLAUDE_MODEL}

      # Discord and Channel Configuration
      - BOT_GUILD_ID=${BOT_GUILD_ID}
      - BOT_RESOURCES_CHANNEL_ID=${BOT_RESOURCES_CHANNEL_ID}
      - BOT_CRISIS_RESPONSE_CHANNEL_ID=${BOT_CRISIS_RESPONSE_CHANNEL_ID}
      - BOT_ALLOWED_CHANNELS=${BOT_ALLOWED_CHANNELS}

      # Team Configuration
      - BOT_STAFF_PING_USER=${BOT_STAFF_PING_USER}
      - BOT_CRISIS_RESPONSE_ROLE_ID=${BOT_CRISIS_RESPONSE_ROLE_ID}
      - BOT_RESOURCES_CHANNEL_NAME=${BOT_RESOURCES_CHANNEL_NAME}
      - BOT_CRISIS_RESPONSE_ROLE_NAME=${BOT_CRISIS_RESPONSE_ROLE_NAME}
      - BOT_STAFF_PING_NAME=${BOT_STAFF_PING_NAME}

      # API Server Configuration
      - GLOBAL_BOT_API_PORT=${GLOBAL_BOT_API_PORT:-8882}

      # Learning System Configuration
      - GLOBAL_ENABLE_LEARNING_SYSTEM=${GLOBAL_ENABLE_LEARNING_SYSTEM}
      - BOT_LEARNING_CONFIDENCE_THRESHOLD=${BOT_LEARNING_CONFIDENCE_THRESHOLD}
      - BOT_MAX_LEARNING_ADJUSTMENTS_PER_DAY=${BOT_MAX_LEARNING_ADJUSTMENTS_PER_DAY}

      # NLP Server Configuration
      - GLOBAL_NLP_API_HOST=${GLOBAL_NLP_API_HOST}
      - GLOBAL_NLP_API_PORT=${GLOBAL_NLP_API_PORT:-8881}

      # Bot Behavior Configuration
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-INFO}
      - BOT_MAX_DAILY_CALLS=${BOT_MAX_DAILY_CALLS:-1000}
      - BOT_RATE_LIMIT_PER_USER=${BOT_RATE_LIMIT_PER_USER:-10}

      # Conversation Configuration
      - BOT_CONVERSATION_REQUIRES_MENTION=${BOT_CONVERSATION_REQUIRES_MENTION:-true}
      - BOT_CONVERSATION_TRIGGER_PHRASES=${BOT_CONVERSATION_TRIGGER_PHRASES:-ash,hey ash,ash help,@ash}
      - BOT_CONVERSATION_ALLOW_STARTERS=${BOT_CONVERSATION_ALLOW_STARTERS:-false}
      - BOT_CONVERSATION_SETUP_INSTRUCTIONS=${BOT_CONVERSATION_SETUP_INSTRUCTIONS:-true}
      - BOT_CONVERSATION_LOG_ATTEMPTS=${BOT_CONVERSATION_LOG_ATTEMPTS:-true}
      - BOT_CONVERSATION_TIMEOUT=${BOT_CONVERSATION_TIMEOUT:-300}
      - BOT_CRISIS_OVERRIDE_LEVELS=${BOT_CRISIS_OVERRIDE_LEVELS:-medium,high}

      # Three Zero-Shot Model Ensemble Configuration
      - BOT_ENABLE_GAP_NOTIFICATIONS=${BOT_ENABLE_GAP_NOTIFICATIONS:-true}
      - BOT_GAP_NOTIFICATION_CHANNEL_ID=${BOT_GAP_NOTIFICATION_CHANNEL_ID}

    volumes:
      - ./ash-bot/logs:/app/logs
      - ./ash-bot/data:/app/data
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8882/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================================================
  # NLP Server (ash-nlp)
  # ========================================================================
  ash-nlp:
    #build:
      #context: ./ash-nlp
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-nlp:latest
    container_name: ash-nlp
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.11
    ports:
      - 8881:8881
    environment:
      # Local Timezone
      - TZ=America/Los_Angeles
      
      # Secrets
      - GLOBAL_HUGGINGFACE_TOKEN=${GLOBAL_HUGGINGFACE_TOKEN}
      - GLOBAL_CLAUDE_API_KEY=${GLOBAL_CLAUDE_API_KEY}

      # Hugging Face Configuration
      - NLP_HUGGINGFACE_CACHE_DIR=${NLP_HUGGINGFACE_CACHE_DIR}
      
      # Mode
      - NLP_ENSEMBLE_MODE=${NLP_ENSEMBLE_MODE:-consensus}

      # Learning System Configuration
      - GLOBAL_ENABLE_LEARNING_SYSTEM=${GLOBAL_ENABLE_LEARNING_SYSTEM:-true}
      - NLP_LEARNING_RATE=${NLP_LEARNING_RATE:-0.1}
      - NLP_MAX_LEARNING_ADJUSTMENTS_PER_DAY=${NLP_MAX_LEARNING_ADJUSTMENTS_PER_DAY:-50}
      - NLP_LEARNING_PERSISTENCE_FILE=${NLP_LEARNING_PERSISTENCE_FILE}
      - NLP_MIN_CONFIDENCE_ADJUSTMENT=${NLP_MIN_CONFIDENCE_ADJUSTMENT:-0.05}
      - NLP_MAX_CONFIDENCE_ADJUSTMENT=${NLP_MAX_CONFIDENCE_ADJUSTMENT:-0.30}
      
      # Model Configuration
      - NLP_DEPRESSION_MODEL=${NLP_DEPRESSION_MODEL:-MoritzLaurer/deberta-v3-base-zeroshot-v2.0}
      - NLP_SENTIMENT_MODEL=${NLP_SENTIMENT_MODEL:-Lowerated/lm6-deberta-v3-topic-sentiment}
      - NLP_EMOTIONAL_DISTRESS_MODEL=${NLP_EMOTIONAL_DISTRESS_MODEL:-facebook/bart-large-mnli}
      - NLP_MODEL_CACHE_DIR=${NLP_MODEL_CACHE_DIR}
      
      # Hardware Configuration
      - NLP_DEVICE=${NLP_DEVICE:-auto}
      - NLP_MODEL_PRECISION=${NLP_MODEL_PRECISION:-float16}
      
      # Performance Tuning
      - NLP_MAX_BATCH_SIZE=${NLP_MAX_BATCH_SIZE:-32}
      - NLP_INFERENCE_THREADS=${NLP_INFERENCE_THREADS:-4}
      - NLP_MAX_CONCURRENT_REQUESTS=${NLP_MAX_CONCURRENT_REQUESTS:-10}
      - NLP_REQUEST_TIMEOUT=${NLP_REQUEST_TIMEOUT:-30}
      
      # Server Configuration
      - GLOBAL_NLP_API_PORT=${GLOBAL_NLP_API_PORT:-8881}
      - NLP_UVICORN_WORKERS=${NLP_UVICORN_WORKERS:-1}
      - NLP_RELOAD_ON_CHANGES=${NLP_RELOAD_ON_CHANGES:-false}
      
      # Logging Configuration
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-INFO}
      - NLP_LOG_FILE=${NLP_LOG_FILE:-nlp_service.log}
      - GLOBAL_ENABLE_DEBUG_MODE=${GLOBAL_ENABLE_DEBUG_MODE:-false}
      - NLP_FLIP_SENTIMENT_LOGIC=${NLP_FLIP_SENTIMENT_LOGIC:-false}
      
      # Storage Paths
      - NLP_DATA_DIR=${NLP_DATA_DIR}
      - NLP_MODELS_DIR=${NLP_MODELS_DIR}
      - NLP_LOGS_DIR=${NLP_LOGS_DIR}
      - NLP_LEARNING_DATA_DIR=${NLP_LEARNING_DATA_DIR}
      
      # UPDATED: Individual model thresholds (if you use them)
      - NLP_HIGH_CRISIS_THRESHOLD=${NLP_HIGH_CRISIS_THRESHOLD:-0.45}
      - NLP_MEDIUM_CRISIS_THRESHOLD=${NLP_MEDIUM_CRISIS_THRESHOLD:-0.25}
      - NLP_LOW_CRISIS_THRESHOLD=${NLP_LOW_CRISIS_THRESHOLD:-0.15}

      # UPDATED: Legacy ensemble thresholds (if you use them)
      - NLP_ENSEMBLE_HIGH_CRISIS_THRESHOLD=${NLP_ENSEMBLE_HIGH_CRISIS_THRESHOLD:-0.45}
      - NLP_ENSEMBLE_MEDIUM_CRISIS_THRESHOLD=${NLP_ENSEMBLE_MEDIUM_CRISIS_THRESHOLD:-0.25}
      - NLP_ENSEMBLE_LOW_CRISIS_THRESHOLD=${NLP_ENSEMBLE_LOW_CRISIS_THRESHOLD:-0.12}
      
      # Additional threshold controls (new)
      - NLP_MILD_CRISIS_THRESHOLD=${NLP_MILD_CRISIS_THRESHOLD:-0.25}
      - NLP_NEGATIVE_RESPONSE_THRESHOLD=${NLP_NEGATIVE_RESPONSE_THRESHOLD:-0.65}
      - NLP_UNKNOWN_RESPONSE_THRESHOLD=${NLP_UNKNOWN_RESPONSE_THRESHOLD:-0.45}
      
      # Safety controls (new)
      - NLP_CONSENSUS_SAFETY_BIAS=${NLP_CONSENSUS_SAFETY_BIAS:-0.05}
      - NLP_ENABLE_SAFETY_OVERRIDE=${NLP_ENABLE_SAFETY_OVERRIDE:-true}
      
      # UPDATED: Model weights
      - NLP_DEPRESSION_MODEL_WEIGHT=${NLP_DEPRESSION_MODEL_WEIGHT:-0.6}
      - NLP_SENTIMENT_MODEL_WEIGHT=${NLP_SENTIMENT_MODEL_WEIGHT:-0.15}
      - NLP_EMOTIONAL_DISTRESS_MODEL_WEIGHT=${NLP_EMOTIONAL_DISTRESS_MODEL_WEIGHT:-0.25}
      
      # UPDATED: Gap detection thresholds
      - NLP_GAP_DETECTION_THRESHOLD=${NLP_GAP_DETECTION_THRESHOLD:-0.25}
      - NLP_DISAGREEMENT_THRESHOLD=${NLP_DISAGREEMENT_THRESHOLD:-0.35}
      - NLP_AUTO_FLAG_DISAGREEMENTS=${NLP_AUTO_FLAG_DISAGREEMENTS:-true}
      
      # NEW: Primary consensus mapping thresholds
      - NLP_CONSENSUS_CRISIS_TO_HIGH_THRESHOLD=${NLP_CONSENSUS_CRISIS_TO_HIGH_THRESHOLD:-0.50}
      - NLP_CONSENSUS_CRISIS_TO_MEDIUM_THRESHOLD=${NLP_CONSENSUS_CRISIS_TO_MEDIUM_THRESHOLD:-0.30}
      - NLP_CONSENSUS_MILD_CRISIS_TO_LOW_THRESHOLD=${NLP_CONSENSUS_MILD_CRISIS_TO_LOW_THRESHOLD:-0.40}
      - NLP_CONSENSUS_NEGATIVE_TO_LOW_THRESHOLD=${NLP_CONSENSUS_NEGATIVE_TO_LOW_THRESHOLD:-0.70}
      - NLP_CONSENSUS_UNKNOWN_TO_LOW_THRESHOLD=${NLP_CONSENSUS_UNKNOWN_TO_LOW_THRESHOLD:-0.50}
      
      # NEW: Staff review thresholds
      - NLP_STAFF_REVIEW_HIGH_ALWAYS=${NLP_STAFF_REVIEW_HIGH_ALWAYS:-true}
      - NLP_STAFF_REVIEW_MEDIUM_CONFIDENCE_THRESHOLD=${NLP_STAFF_REVIEW_MEDIUM_CONFIDENCE_THRESHOLD:-0.45}
      - NLP_STAFF_REVIEW_LOW_CONFIDENCE_THRESHOLD=${NLP_STAFF_REVIEW_LOW_CONFIDENCE_THRESHOLD:-0.75}
      - NLP_STAFF_REVIEW_ON_MODEL_DISAGREEMENT=${NLP_STAFF_REVIEW_ON_MODEL_DISAGREEMENT:-true}
      
      # Rate Limiting
      - NLP_MAX_REQUESTS_PER_MINUTE=${NLP_MAX_REQUESTS_PER_MINUTE:-60}
      - NLP_MAX_REQUESTS_PER_HOUR=${NLP_MAX_REQUESTS_PER_HOUR:-1000}
      
      # Security
      - GLOBAL_ALLOWED_IPS=${GLOBAL_ALLOWED_IPS}
      - GLOBAL_ENABLE_CORS=${GLOBAL_ENABLE_CORS}

      # EXPERIMENTAL FEATURES
      - NLP_ENABLE_ENSEMBLE_ANALYSIS=${NLP_ENABLE_ENSEMBLE_ANALYSIS:-true}
      - NLP_ENABLE_GAP_DETECTION=${NLP_ENABLE_GAP_DETECTION:-true}
      - NLP_ENABLE_CONFIDENCE_SPREADING=${NLP_ENABLE_CONFIDENCE_SPREADING:-true}
      - NLP_LOG_MODEL_DISAGREEMENTS=${NLP_LOG_MODEL_DISAGREEMENTS:-true}
    volumes:
      - ./ash-nlp/data:/app/data
      - ./ash-nlp/models/cache:/app/models/cache
      - ./ash-nlp/logs:/app/logs
      - ./ash-nlp/learning_data:/app/learning_data
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 8G  # Keep high for 3 models
          cpus: '4.0'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8881/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # =========================================================================
  # Ash-Thrash API Server
  # =========================================================================
  ash-thrash-api:
    #build:
      #context: ./ash-thrash
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-thrash:latest
    container_name: ash-thrash-api
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.13
    ports:
      - 8884:8884
    environment:
      # Core Configuration
      - GLOBAL_NLP_API_URL=${GLOBAL_NLP_API_URL:-http://10.20.30.253:8881}
      - GLOBAL_THRASH_API_PORT=${GLOBAL_THRASH_API_PORT:-8884}
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-INFO}
      - GLOBAL_ENABLE_DEBUG_MODE=${GLOBAL_ENABLE_DEBUG_MODE:-false}
      - GLOBAL_ENABLE_CORS=${GLOBAL_ENABLE_CORS:-true}
      - GLOBAL_CORS_ORIGINS=${GBLOABL_CORS_ORIGINS:-*}
      
      # API Configuration
      - THRASH_API_HOST=${THRASH_API_HOST:-0.0.0.0}
      - THRASH_ENABLE_API_DOCS=${THRASH_ENABLE_API_DOCS:-true}
      - THRASH_API_RATE_LIMIT=${THRASH_API_RATE_LIMIT:-100}
      - THRASH_ENABLE_API_AUTHENTICATION=${THRASH_ENABLE_API_AUTHENTICATION:-false}

      # Testing Configuration
      - THRASH_MAX_CONCURRENT_TESTS=${THRASH_MAX_CONCURRENT_TESTS:-3}
      - THRASH_QUICK_TEST_SAMPLE_SIZE=${THRASH_QUICK_TEST_SAMPLE_SIZE:-50}
      - THRASH_REQUEST_TIMEOUT=${THRASH_REQUEST_TIMEOUT:-30}
      - THRASH_AUTO_CLEANUP_RESULTS=${THRASH_AUTO_CLEANUP_RESULTS:-true}
      
      # Discord Integration
      - THRASH_DISCORD_WEBHOOK_URL=${THRASH_DISCORD_WEBHOOK_URL:-}
      - THRASH_DISCORD_WEBHOOK_USERNAME=${THRASH_DISCORD_WEBHOOK_USERNAME:-Ash-Thrash}
      - THRASH_DISCORD_NOTIFICATIONS_ENABLED=${THRASH_DISCORD_NOTIFICATIONS_ENABLED:-true}
      - THRASH_NOTIFY_ON_CATEGORY_TESTS=${THRASH_NOTIFY_ON_CATEGORY_TESTS:-false}
      - THRASH_NOTIFY_ON_FAILURES_ONLY=${THRASH_NOTIFY_ON_FAILURES_ONLY:-false}
      - THRASH_NOTIFY_ON_COMPREHENSIVE_TESTS=${NOTIFY_ON_COMPREHENSIVE_TESTS:-true}
      - THRASH_NOTIFY_ON_QUICK_TESTS=${NOTIFY_ON_QUICK_TESTS:-false}
      
      # Logging
      - THRASH_LOG_FILE=ash-thrash.log
      
      # Tuning Suggestions
      - THRASH_GENERATE_SUGGESTIONS=${THRASH_GENERATE_SUGGESTIONS:-true}
      - THRASH_SUGGESTION_THRESHOLD=${THRASH_SUGGESTION_THRESHOLD:-10.0}
      - THRASH_CRITICAL_THRESHOLD=${THRASH_CRITICAL_THRESHOLD:-20.0}
      
      # Performance
      - THRASH_ENABLE_RESULT_CACHING=${THRASH_ENABLE_RESULT_CACHING:-true}
      - THRASH_CACHE_TTL_SECONDS=${THRASH_CACHE_TTL_SECONDS:-300}
      - THRASH_REQUEST_TIMEOUT=${THRASH_REQUEST_TIMEOUT:-30}
      - THRASH_CONNECTION_POOL_SIZE=${THRASH_CONNECTION_POOL_SIZE:-10}
      
      # Tuning Suggestions
      - THRASH_GENERATE_SUGGESTIONS=${THRASH_GENERATE_SUGGESTIONS:-true}
      - THRASH_SUGGESTION_THRESHOLD=${THRASH_SUGGESTION_THRESHOLD:-10.0}
      - THRASH_CRITICAL_THRESHOLD=${THRASH_CRITICAL_THRESHOLD:-20.0}
      
      # Test Execution
      - THRASH_RETRY_FAILED_TESTS=${THRASH_RETRY_FAILED_TESTS:-true}
      - THRASH_MAX_RETRIES=${THRASH_MAX_RETRIES:-3}
      - THRASH_RETRY_DELAY_SECONDS=${THRASH_RETRY_DELAY_SECONDS:-5}
      
      # API Response Caching
      - THRASH_ENABLE_RESULT_CACHING=${THRASH_ENABLE_RESULT_CACHING:-true}
      - THRASH_CACHE_TTL_SECONDS=${THRASH_CACHE_TTL_SECONDS:-300}
      
      # Health Check Settings
      - THRASH_HEALTH_CHECK_INTERVAL=${THRASH_HEALTH_CHECK_INTERVAL:-30}
      - THRASH_NLP_HEALTH_CHECK_TIMEOUT=${THRASH_NLP_HEALTH_CHECK_TIMEOUT:-5}
      
      # Development Mode
      - THRASH_DEVELOPMENT_MODE=${THRASH_DEVELOPMENT_MODE:-false}
      - THRASH_ENABLE_API_DOCS=${THRASH_ENABLE_API_DOCS:-true}
      
      # Test Data Validation
      - THRASH_VALIDATE_DATA_ON_STARTUP=${THRASH_VALIDATE_DATA_ON_STARTUP:-true}
      - THRASH_STRICT_VALIDATION=${THRASH_STRICT_VALIDATION:-true}

    volumes:
      # Results and logs persistence
      - ./ash-thrash/results:/app/results
      - ./ash-thrash/logs:/app/logs
      - ./ash-thrash/reports:/app/reports
      
      # Configuration (read-only)
      - ./ash-thrash/config:/app/config:ro
      
      # Secrets
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8884/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=false"
      - "ash.service=thrash-api"
      - "ash.version=v3.0"

  # =========================================================================
  # Ash-Thrash CLI Runner (on-demand)
  # =========================================================================
  ash-thrash:
    #build:
      #context: ./ash-thrash
      #dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-thrash:latest
    container_name: ash-thrash
    networks:
      ash-network:
        ipv4_address: 172.20.0.14
    
    # Override default command for CLI operations
    entrypoint: ["python", "cli.py"]
    command: ["validate", "setup"]  # Default command
    
    environment:
      - GLOBAL_NLP_API_URL=${GLOBAL_NLP_API_URL:-http://10.20.30.253:8881}
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-INFO}
      - THRASH_REQUEST_TIMEOUT=${THRASH_REQUEST_TIMEOUT:-30}
    volumes:
      - ./ash-thrash/results:/app/results
      - ./ash-thrash/logs:/app/logs
      - ./ash-thrash/config:/app/config:ro
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-thrash-api:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - cli
      - testing
    labels:
      - "ash.service=thrash-cli"
      - "ash.version=v3.0"

  # ========================================================================
  # Analytics Dashboard (ash-dash)
  # ========================================================================
#  ash-dash:
#    build:
#      context: ./ash-dash
#      dockerfile: ./Dockerfile
#    image: ghcr.io/the-alphabet-cartel/ash-dash:latest
#    container_name: ash-dash
#    restart: unless-stopped
#    networks:
#      ash-network:
#        ipv4_address: 172.20.0.12
#    ports:
#      - 8883:8883
#    environment:
#      # Local Timezone
#      - TZ=America/Los_Angeles
#      
#      # SSL Configuration
#      - DASH_ENABLE_SSL=${DASH_ENABLE_SSL:-false}
#      - DASH_SSL_CERT_PATH=${DASH_SSL_CERT_PATH}
#      - DASH_SSL_KEY_PATH=${DASH_SSL_KEY_PATH}
#      
#      # Ash Bot API (Discord Bot with Crisis Detection)
#      - GLOBAL_DASH_API_PORT=${GLOBAL_DASH_API_PORT:-8883}
#      - GLOBAL_BOT_API_URL=${GLOBAL_BOT_API_URL}
#      - DASH_BOT_API_TIMEOUT=${DASH_BOT_API_TIMEOUT:-5000}
#      
#      # Ash NLP Server API (Machine Learning Analysis)
#      - GLOBAL_NLP_API_URL=${GLOBAL_NLP_API_URL}
#      - DASH_NLP_API_TIMEOUT=${DASH_NLP_API_TIMEOUT:-10000}
#      
#      # Cache Settings
#      - DASH_CACHE_TTL=${DASH_CACHE_TTL:-300}
#      
#      # Real-time Updates
#      - DASH_ENABLE_SOCKET_IO=${DASH_ENABLE_SOCKET_IO:-true}
#      - DASH_METRICS_UPDATE_INTERVAL=${DASH_METRICS_UPDATE_INTERVAL:-30000}
#
#      # LOGGING & MONITORING
#      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-info}
#      - DASH_LOG_DIR=${DASH_LOG_DIR:-./logs}
#      - DASH_LOG_FILE=${DASH_LOG_FILE:-ash-dash.log}
#      
#      # DOCKER SECRETS CONFIGURATION
#      - GLOBAL_SESSION_TOKEN=${GLOBAL_SESSION_TOKEN}
#      
#      # Enable Access
#      - DASH_ENABLE_ACCESS_LOGS=${DASH_ENABLE_ACCESS_LOGS:-true}
#      
#      # Rate Limits
#      - DASH_RATE_LIMIT_WINDOW=${DASH_RATE_LIMIT_WINDOW:-900000}
#      - DASH_RATE_LIMIT_MAX=${DASH_RATE_LIMIT_MAX:-100}
#      - DASH_RATE_LIMIT_MESSAGE=${DASH_RATE_LIMIT_MESSAGE:-Too many requests, please try again later}
#    volumes:
#      - ./ash-dash/logs:/app/logs
#      - ./ash-dash/data:/app/data
#      - ./ash-dash/cache:/app/cache
#      - ./ash-dash/public:/app/public:ro
#      - ./ash-dash/dashboard:/app/dashboard:ro
#      - ./secrets:/run/secrets:ro
#    depends_on:
#      ash-bot:
#        condition: service_healthy
#      ash-nlp:
#        condition: service_healthy
#      ash-redis:
#        condition: service_started
#    deploy:
#      resources:
#        limits:
#          memory: 2G
#          cpus: '1.0'
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8883/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 30s

  # ========================================================================
  # Redis Cache
  # ========================================================================
  ash-redis:
    image: redis:7-alpine
    container_name: ash-redis
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.20
    ports:
      - 6379:6379
    command: redis-server --appendonly yes --requirepass ${GLOBAL_REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./secrets:/run/secrets:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ash-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  redis_data:
    driver: local
  ash-thrash-results:
    name: ash-thrash-results
    driver: local
  ash-thrash-logs:
    name: ash-thrash-logs
    driver: local