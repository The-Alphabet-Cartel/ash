# Master Docker Compose for Ash Ecosystem
# Repository: https://github.com/the-alphabet-cartel/ash
# Discord: https://discord.gg/alphabetcartel
# Website: http://alphabetcartel.org
services:
  # ========================================================================
  # Discord Bot (ash-bot)
  # ========================================================================
  ash-bot:
    build:
      context: ./ash-bot
      dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-bot:organic
    container_name: ash-bot
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.10
    ports:
      - 8882:8882
    environment:
      - BOT_DISCORD_TOKEN=${BOT_DISCORD_TOKEN}
      - GLOBAL_SESSION_TOKEN=${GLOBAL_SESSION_TOKEN}
      - GLOBAL_CLAUDE_API_KEY=${GLOBAL_CLAUDE_API_KEY}
      - GLOBAL_CLAUDE_MODEL=${GLOBAL_CLAUDE_MODEL}

      # Discord and Channel Configuration
      - BOT_GUILD_ID=${BOT_GUILD_ID}
      - BOT_RESOURCES_CHANNEL_ID=${BOT_RESOURCES_CHANNEL_ID}
      - BOT_CRISIS_RESPONSE_CHANNEL_ID=${BOT_CRISIS_RESPONSE_CHANNEL_ID}
      - BOT_ALLOWED_CHANNELS=${BOT_ALLOWED_CHANNELS}

      # Team Configuration
      - BOT_STAFF_PING_USER=${BOT_STAFF_PING_USER}
      - BOT_CRISIS_RESPONSE_ROLE_ID=${BOT_CRISIS_RESPONSE_ROLE_ID}
      - BOT_RESOURCES_CHANNEL_NAME=${BOT_RESOURCES_CHANNEL_NAME}
      - BOT_CRISIS_RESPONSE_ROLE_NAME=${BOT_CRISIS_RESPONSE_ROLE_NAME}
      - BOT_STAFF_PING_NAME=${BOT_STAFF_PING_NAME}

      # API Server Configuration
      - GLOBAL_BOT_API_PORT=${GLOBAL_BOT_API_PORT:-8882}

      # Learning System Configuration
      - GLOBAL_ENABLE_LEARNING_SYSTEM=${GLOBAL_ENABLE_LEARNING_SYSTEM}
      - BOT_LEARNING_CONFIDENCE_THRESHOLD=${BOT_LEARNING_CONFIDENCE_THRESHOLD}
      - BOT_MAX_LEARNING_ADJUSTMENTS_PER_DAY=${BOT_MAX_LEARNING_ADJUSTMENTS_PER_DAY}

      # NLP Server Configuration
      - GLOBAL_NLP_API_HOST=${GLOBAL_NLP_API_HOST}
      - GLOBAL_NLP_API_PORT=${GLOBAL_NLP_API_PORT:-8881}

      # Bot Behavior Configuration
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-INFO}
      - BOT_MAX_DAILY_CALLS=${BOT_MAX_DAILY_CALLS:-1000}
      - BOT_RATE_LIMIT_PER_USER=${BOT_RATE_LIMIT_PER_USER:-10}

      # Conversation Configuration
      - BOT_CONVERSATION_REQUIRES_MENTION=${BOT_CONVERSATION_REQUIRES_MENTION:-true}
      - BOT_CONVERSATION_TRIGGER_PHRASES=${BOT_CONVERSATION_TRIGGER_PHRASES:-ash,hey ash,ash help,@ash}
      - BOT_CONVERSATION_ALLOW_STARTERS=${BOT_CONVERSATION_ALLOW_STARTERS:-true}
      - BOT_CONVERSATION_SETUP_INSTRUCTIONS=${BOT_CONVERSATION_SETUP_INSTRUCTIONS:-true}
      - BOT_CONVERSATION_LOG_ATTEMPTS=${BOT_CONVERSATION_LOG_ATTEMPTS:-true}
      - BOT_CONVERSATION_TIMEOUT=${BOT_CONVERSATION_TIMEOUT:-300}
      - BOT_CRISIS_OVERRIDE_LEVELS=${BOT_CRISIS_OVERRIDE_LEVELS:-medium,high}
    volumes:
      - ./ash-bot/logs:/app/logs
      - ./ash-bot/data:/app/data
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8882/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================================================
  # NLP Server (ash-nlp)
  # ========================================================================
  ash-nlp:
    build:
      context: ./ash-nlp
      dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-nlp:organic
    container_name: ash-nlp
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.11
    ports:
      - 8881:8881
    environment:
      # Point to secret files
      - GLOBAL_HUGGINGFACE_TOKEN=${GLOBAL_HUGGINGFACE_TOKEN}
      - GLOBAL_CLAUDE_API_KEY=${GLOBAL_CLAUDE_API_KEY}

      # Core Python settings
      - GLOBAL_PYTHONUNBUFFERED=${GLOBAL_PYTHONUNBUFFERED}
      
      # Hugging Face Configuration
      - NLP_HUGGINGFACE_CACHE_DIR=${NLP_HUGGINGFACE_CACHE_DIR}
      
      # Learning System Configuration
      - GLOBAL_ENABLE_LEARNING_SYSTEM=${GLOBAL_ENABLE_LEARNING_SYSTEM:-true}
      - NLP_LEARNING_RATE=${NLP_LEARNING_RATE:-0.1}
      - NLP_MAX_LEARNING_ADJUSTMENTS_PER_DAY=${NLP_MAX_LEARNING_ADJUSTMENTS_PER_DAY:-50}
      - NLP_LEARNING_PERSISTENCE_FILE=${NLP_LEARNING_PERSISTENCE_FILE}
      - NLP_MIN_CONFIDENCE_ADJUSTMENT=${NLP_MIN_CONFIDENCE_ADJUSTMENT:-0.05}
      - NLP_MAX_CONFIDENCE_ADJUSTMENT=${NLP_MAX_CONFIDENCE_ADJUSTMENT:-0.30}
      
      # Model Configuration
      - NLP_DEPRESSION_MODEL=${NLP_DEPRESSION_MODEL:-rafalposwiata/deproberta-large-depression}
      - NLP_SENTIMENT_MODEL=${NLP_SENTIMENT_MODEL:-cardiffnlp/twitter-roberta-base-sentiment-latest}
      - NLP_MODEL_CACHE_DIR=${NLP_MODEL_CACHE_DIR}
      
      # Hardware Configuration
      - NLP_DEVICE=${NLP_DEVICE:-auto}
      - NLP_MODEL_PRECISION=${NLP_MODEL_PRECISION:-float16}
      
      # Performance Tuning
      - NLP_MAX_BATCH_SIZE=${NLP_MAX_BATCH_SIZE:-32}
      - NLP_INFERENCE_THREADS=${NLP_INFERENCE_THREADS:-4}
      - NLP_MAX_CONCURRENT_REQUESTS=${NLP_MAX_CONCURRENT_REQUESTS:-10}
      - NLP_REQUEST_TIMEOUT=${NLP_REQUEST_TIMEOUT:-30}
      
      # Server Configuration
      - GLOBAL_NLP_API_PORT=${GLOBAL_NLP_API_PORT:-8881}
      - NLP_UVICORN_WORKERS=${NLP_UVICORN_WORKERS:-1}
      - NLP_RELOAD_ON_CHANGES=${NLP_RELOAD_ON_CHANGES:-false}
      
      # Logging Configuration
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-INFO}
      - NLP_LOG_FILE=${NLP_LOG_FILE:-nlp_service.log}
      - GLOBAL_ENABLE_DEBUG_MODE=${GLOBAL_ENABLE_DEBUG_MODE:-false}
      - NLP_FLIP_SENTIMENT_LOGIC=${NLP_FLIP_SENTIMENT_LOGIC:-false}
      
      # Storage Paths
      - NLP_DATA_DIR=${NLP_DATA_DIR}
      - NLP_MODELS_DIR=${NLP_MODELS_DIR}
      - NLP_LOGS_DIR=${NLP_LOGS_DIR}
      - NLP_LEARNING_DATA_DIR=${NLP_LEARNING_DATA_DIR}
      
      # Crisis Detection Thresholds
      - NLP_HIGH_CRISIS_THRESHOLD=${NLP_HIGH_CRISIS_THRESHOLD}
      - NLP_MEDIUM_CRISIS_THRESHOLD=${NLP_MEDIUM_CRISIS_THRESHOLD}
      - NLP_LOW_CRISIS_THRESHOLD=${NLP_LOW_CRISIS_THRESHOLD}
      
      # Rate Limiting
      - NLP_MAX_REQUESTS_PER_MINUTE=${NLP_MAX_REQUESTS_PER_MINUTE:-60}
      - NLP_MAX_REQUESTS_PER_HOUR=${NLP_MAX_REQUESTS_PER_HOUR:-1000}
      
      # Security
      - GLOABL_ALLOWED_IPS=${GLOBAL_ALLOWED_IPS}
      - GLOBAL_ENABLE_CORS=${GLOBAL_ENABLE_CORS}
    volumes:
      - ./ash-nlp/data:/app/data
      - ./ash-nlp/models/cache:/app/models/cache
      - ./ash-nlp/logs:/app/logs
      - ./ash-nlp/learning_data:/app/learning_data
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8881/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # ========================================================================
  # Analytics Dashboard (ash-dash)
  # ========================================================================
  ash-dash:
    build:
      context: ./ash-dash
      dockerfile: ./Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-dash:organic
    container_name: ash-dash
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.12
    ports:
      - 8883:8883
    environment:
      # SSL Configuration
      - DASH_ENABLE_SSL=${DASH_ENABLE_SSL:-false}
      - DASH_SSL_CERT_PATH=${DASH_SSL_CERT_PATH}
      - DASH_SSL_KEY_PATH=${DASH_SSL_KEY_PATH}
      
      # Ash Bot API (Discord Bot with Crisis Detection)
      - GLOBAL_DASH_API_PORT=${GLOBAL_DASH_API_PORT:-8883}
      - GLOBAL_BOT_API_URL=${GLOBAL_BOT_API_URL}
      - DASH_BOT_API_TIMEOUT=${DASH_BOT_API_TIMEOUT:-5000}
      
      # Ash NLP Server API (Machine Learning Analysis)
      - GLOBAL_NLP_API_URL=${GLOBAL_NLP_API_URL}
      - DASH_NLP_API_TIMEOUT=${DASH_NLP_API_TIMEOUT:-10000}
      
      # Cache Settings
      - DASH_CACHE_TTL=${DASH_CACHE_TTL:-300}
      
      # Real-time Updates
      - DASH_ENABLE_SOCKET_IO=${DASH_ENABLE_SOCKET_IO:-true}
      - DASH_METRICS_UPDATE_INTERVAL=${DASH_METRICS_UPDATE_INTERVAL:-30000}

      # LOGGING & MONITORING
      - GLOBAL_LOG_LEVEL=${GLOBAL_LOG_LEVEL:-info}
      - DASH_LOG_DIR=${DASH_LOG_DIR:-./logs}
      - DASH_LOG_FILE=${DASH_LOG_FILE:-ash-dash.log}
      
      # DOCKER SECRETS CONFIGURATION
      - GLOBAL_SESSION_TOKEN=${GLOBAL_SESSION_TOKEN}
      
      # Enable Access
      - DASH_ENABLE_ACCESS_LOGS=${DASH_ENABLE_ACCESS_LOGS:-true}
      
      # Rate Limits
      - DASH_RATE_LIMIT_WINDOW=${DASH_RATE_LIMIT_WINDOW:-900000}
      - DASH_RATE_LIMIT_MAX=${DASH_RATE_LIMIT_MAX:-100}
      - DASH_RATE_LIMIT_MESSAGE=${DASH_RATE_LIMIT_MESSAGE:-Too many requests, please try again later}
    volumes:
      - ./ash-dash/logs:/app/logs
      - ./ash-dash/data:/app/data
      - ./ash-dash/cache:/app/cache
      - ./ash-dash/public:/app/public:ro
      - ./ash-dash/dashboard:/app/dashboard:ro
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-bot:
        condition: service_healthy
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8883/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================================================
  # Testing Suite (ash-thrash)
  # ========================================================================
  ash-thrash:
    build:
      context: ./ash-thrash
      dockerfile: ./docker/Dockerfile
    image: ghcr.io/the-alphabet-cartel/ash-thrash:organic
    container_name: ash-thrash
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.13
    environment:
      - GLOBAL_NLP_API_URL=${GLOBAL_NLP_API_URL}
      - THRASH_MAX_CONCURRENT_TESTS=${THRASH_MAX_CONCURRENT_TESTS}
    volumes:
      - ./ash-thrash/config:/app/config
      - ./ash-thrash/src:/app/src
      - ./ash-thrash/logs:/app/logs
      - ./ash-thrash/results:/app/results
      - ./ash-thrash/reports:/app/reports
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-dash:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  ash-thrash-api:
    build:
      context: ./ash-thrash
      dockerfile: ./docker/Dockerfile.api
    image: ghcr.io/the-alphabet-cartel/ash-thrash-api:organic
    container_name: ash-thrash-api
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.14
    ports:
      - 8884:8884
    environment:
      - GLOBAL_NLP_API_URL=${GLOBAL_NLP_API_URL}
      - GLOBAL_THRASH_API_PORT=${GLOBAL_THRASH_API_PORT}
      - GLOBAL_ENABLE_DEBUG_MODE=${GLOBAL_ENABLE_DEBUG_MODE}
      - THRASH_API_HOST=${THRASH_API_HOST}
    volumes:
      - ./ash-thrash/config:/app/config
      - ./ash-thrash/src:/app/src
      - ./ash-thrash/results:/app/results
      - ./secrets:/run/secrets:ro
    depends_on:
      ash-nlp:
        condition: service_healthy
      ash-redis:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8884/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================================================
  # Redis Cache
  # ========================================================================
  ash-redis:
    image: redis:7-alpine
    container_name: ash-redis
    restart: unless-stopped
    networks:
      ash-network:
        ipv4_address: 172.20.0.20
    ports:
      - 6379:6379
    command: redis-server --appendonly yes --requirepass ${GLOBAL_REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./secrets:/run/secrets:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ash-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local